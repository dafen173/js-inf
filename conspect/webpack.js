export const webpack = ''

//https://medium.com/nuances-of-programming/%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B2-webpack-%D0%B4%D0%BB%D1%8F-%D0%BD%D0%BE%D0%B2%D0%B8%D1%87%D0%BA%D0%BE%D0%B2-6cafbf562386


//https://habr.com/ru/post/514838/
// Вебпак — это сборщик модулей. Он анализирует модули приложения, создает граф зависимостей, затем собирает модули в правильном порядке в один или более бандл (bundle), на который может ссылаться файл «index.html».

// App.js ->       |
// Dashboard.js -> | Bundler | -> bundle.js
// About.js ->     |

// Какие проблемы решает вебпак?
// Обычно, при создании приложения на JavaScript, код разделяется на несколько частей (модулей). 
//Затем в файле «index.html» необходимо указать ссылку на каждый скрипт.

// <body>
//     ...
//     <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
//     <script src="libs/react.min.js"></script>
//     <script src='src/admin.js'></script>
//     <script src='src/dashboard.js'></script>
//     <script src='src/api.js'></script>
//     <script src='src/auth.js'></script>
//     <script src='src/rickastley.js'></script>
// </body>

//Это не только утомительно, но и подвержено ошибкам. Важно не только не забыть про какой-нибудь скрипт, 
//но и расположить их в правильном порядке. Если загрузить скрипт, зависящий от React, до загрузки 
//самого React, приложение сломается. Вебпак решает эти задачи. Не нужно беспокоиться о 
//последовательном включении всех скриптов.

// <body>
// ...
// <script src='dist/bundle.js'></script>
// </body>

//Как мы скоро узнаем, сбор модулей является лишь одним из аспектов работы вебпака. При необходимости можно заставить вебпак осуществить некоторые преобразования модулей перед их добавлением в бандл. Например, преобразование SASS/LESS в обычный CSS, или современного JavaScript в ES5 для старых браузеров.


//https://timeweb.com/ru/community/articles/chto-takoe-vebpak-webpack-1
// Webpack– это статический модульный сборщик для приложений на JavaScript. 
//Официальный сайт проекта:https://webpack.js.org/

// Зачем нужен Вебпак
// Приложения, написанные на JavaScript, постоянно усложняются, поэтому для сбора модулей все чаще 
//используют специальный инструмент – бандлер. Подобные инструменты позволяют разработчикам упаковывать, 
//компилировать и в целом организовывать все ресурсы, необходимые для проекта. Можно использовать не 
//только сторонние библиотеки, но и собственные файлы. Подобная модульная система позволяет добиться лучшей 
//организации проекта, так как он разбивается на небольшие модули.

// Вебпак на данный момент является одним из самых мощных подобных бандлеров, т.е. модульныx сборщиков. 
//Он имеет открытый исходный код и позволяет решать великое множество задач. Как и другие инструменты 
//разработчика, вебпак имеет свои плюсы и минусы.

// Начнем с плюсов: он отлично подходит для работы с одностраничными приложениями. Также вебпак может 
//осуществлять продвинутое разделение кода. Из-за этих и других преимуществ он является одним из 
//наиболее популярных инструментов JS-разработки на данный момент.

// Минусы: немного сложно разобраться в его работе, часть документации устарела из-за большого количества 
//изменений в обновлениях.


// Установка и настройка Webpack
// Вебпак можно установить при помощи менеджера пакетов, например,npm.
// npm install --save-dev webpack

// Базовые понятия
// Вебпак – это очень гибкий в настройке инструмент. Для того чтобы начать работать с ним, необходимо 
//ознакомиться с четырьмя базовыми понятиями.

// Entry – вход
// Output – вывод
// Loaders – загрузчики
// Plugins – плагины
// Entry

// Под Entry (вход) подразумевается точка входа (entry point), которую Вебпак будет использовать для 
//построения внутреннего графа зависимостей. После ввода точки входа Вебпак сможет понять, какие модули и 
//библиотеки напрямую и не напрямую связываются.

// В результате каждая зависимость превращается в файлы, которые называются бандлами 
//(«bundles» можно перевести как пакеты или узлы).

// Пример простейшей конфигурации entry:
// webpack.config.js
// module.exports = {
//   entry: './path/to/my/entry/file.js'
// };

// Output
// Output (вывод) указывает на то, где вебпак должен размещать сборку созданных бандлов и как он будет 
//называть эти файлы (по умолчанию это ./dist). Настроить эту часть процесса можно в поле output 
//в конфигурации:

// webpack.config.js
// const path = require('path');
// module.exports = {
//   entry: './path/to/my/entry/file.js',
//   output: {
//      path: path.resolve(__dirname, 'dist'),
//      filename: 'my-first-webpack.bundle.js'
//   }
// };
// В этом примере output.filename отвечает за имя файла, а output.path – за директорию, в которой
//будет находиться сборка.

// Loaders
// Загрузчики (лоадеры) позволяют Вебпаку обрабатывать не только файлы JavaScript, т.к. сам по 
//себе бандлер понимает только JS.
// Загрузчики трансформируют все типы файлов в модули, которые затем можно добавить в графу зависимостей 
//вашего приложения (а значит, и в бандл).

// Лоадеры для вебпака
// Использование загрузчиков имеет две цели:

// Свойство test определяет, какие файлы должны быть трансформированы.
// Свойство use указывает, какой загрузчик должен использоваться для выполнения трансформации.

// Пример конфигурации:
// const path = require('path');

// const config = {
//   output: {
//      filename: 'my-first-webpack.bundle.js'
//   },
//   module: {
// rules: [
//    { test: /\.txt$/, use: 'raw-loader' }
// ]
//   }
// };
// module.exports = config;
// Здесь определяются правила (rules) для конкретного модуля и используются свойства test и use. 
//Компилятор Вебпака поймет, что когда он дойдет до файла «.txt» в require()/import, 
//перед добавлением в бандл ему нужно будет использовать загрузчик raw-loader.

// Список популярных загрузчиков можно найтиздесь.

// Plugins
// Если загрузчики используются для трансформации определенных типов модулей, то плагины могут быть 
//использованы для выполнения гораздо более широкого списка задач.
// Для того чтобы использовать плагин, необходимо использовать require() и добавить его в массив плагинов. 
//Большинство плагинов можно кастомизировать через настройки. Так как один плагин может использоваться 
//несколько раз для разных целей, необходимо создать несколько отдельных экземпляров, 
//использовав оператор new.

// Много плагинов поставляются сразу с Webpack из коробки. Их список можно найтиздесь.

// Заключение
// Вебпак – это полезный и гибко настраиваемый инструмент для разработки, который постоянно дорабатывается 
//и улучшается.



