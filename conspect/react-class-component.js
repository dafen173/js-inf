export const reactClassComponent = ''


//https://bookflow.ru/shpargalka-po-react-otvety-na-voprosy-2020-2021/
//  Как компоненты Class сравниваются с компонентами Function?
//  — С помощью React Hooks компоненты класса заменяются функциональными компонентами 
//для большинства случаев использования¹
//  — В прошлом логика с учетом состояния и жизненного цикла могла быть включена только в компоненты класса

//  Недостатки функциональных компонентов
//  — Для необычных жизненных циклов еще нет эквивалентов Hook: getSnapshotBeforeUpdate и componentDidCatch
//  — Старые сторонние библиотеки могут быть несовместимы с хуками

//  Недостатки компонентов класса
//  — Классы добавляют ненужную путаницу ради синтаксического сахара.
//  — Классы приводят к громоздкому иерархическому дереву, особенно во время 
//повторного использования кода, что приводит к снижению производительности и сложности тестирования.
//  — Методы жизненного цикла класса разделяют связанные фрагменты кода


//https://github.com/harryheman/React-Total/blob/main/md/questions_react.md#6
// Когда лучше использовать классовый компонент, а когда функциональный?
// Если компонент нуждается в состоянии или методах жизненного цикла, тогда используйте 
//классовый компонент, иначе, используйте функциональный компонент.
// Обратите внимание: в React 16.8 были представлены хуки, позволяющие использовать состояние, 
//методы жизненного цикла и другие возможности классовых компонентов в функциях.

//пример классового компонента
class Clock extends React.Component {
    constructor(props) {
      super(props);
      this.state = {date: new Date()};
    }
  
    componentDidMount() {
      this.timerID = setInterval(
        () => this.tick(),
        1000
      );
    }
  
    componentWillUnmount() {
      clearInterval(this.timerID);
    }
  
    tick() {
      this.setState({
        date: new Date()
      });
    }
  
    render() {
      return (
        <div>
          <h1>Привет, мир!</h1>
          <h2>Сейчас {this.state.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
  
  ReactDOM.render(
    <Clock />,
    document.getElementById('root')
  );







