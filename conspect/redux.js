export const redux = ''


//https://github.com/harryheman/React-Total/blob/main/md/questions_react-v2.md#1%D0%B2-%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-redux


// Redux
// Redux - это предсказуемый контейнер для хранения состояния JavaScript-приложений. 
//Он помогает создавать приложения, которые ведут себя предсказуемо (действуют согласованно), 
//работают в разном окружении (клиент, сервер, нативное) и легко поддаются тестированию.

// Проще говоря, Redux - это инструмент для управления состоянием (state management tool). 
//Обычно, он используется с React, но может использоваться и с любым другим фреймворком или библиотекой. 
//В случае с Redux, состояние приложения находится в хранилище (store), каждый компонент имеет доступ 
//к этому хранилищу.

// Как работает Redux?
// Имеется центральное хранилище, содержащее состояние приложения. Каждый компонент имеет доступ 
//к этому хранилищу, так что нет необходимости передавать пропы из одного компонента в другой. 
//Существует три строительных блока: хранилище, редукторы (reducers) и операции (actions).

// Преимущества и ограничения Redux
// 1. Состояние
// Состояние хранится в одном месте. Вы не обязаны хранить состояние всех компонентов в хранилище. 
//Там находится глобальное состояние, т.е. такое, которое требуется нескольким компонентам 
//в сложной архитектуре. Локальное состояние можно хранить в самих компонентах. Хранилище позволяет 
//легко получать данные из любого компонента.

// 2. Предсказуемость
// Redux - это "предсказуемое хранилище для состояния". Поскольку редукторы являются чистыми функциями, 
//они всегда возвращают одинаковый результат для одного и того же состояния и операции.

// 3. Поддерживаемость
// Redux предъявляет жесткие требования к управлению состоянием, что облегчает копирование и расширение 
//архитектуры.
// 4. Тестирование и отладка
// Redux облегчает тестирование и отладку кода благодаря таким инструментам, как Redux DevTools,
// позволяющим "путешествовать во времени", отслеживая состояние и операции.


// В чем заключаются преимущества и недостатки Redux?
// Преимущества
// Хранилище позволяет любому компоненту получать состояние без передачи пропов
// Состояние сохраняется даже при размонтировании компонента
// Предотвращает ненужные повторные рендеринги благодаря поверхностному сравнению нового и старого состояния
// Разделение UI и управления данными облегчает тестирование
// Сохраняется история изменения состояния, что позволяет легко повторять или отменять операции
// Недостатки
// Отсутствует инкапсуляция. Любой компонент имеет доступ к данным, что может привести к проблемам 
//с безопасностью
// Много шаблонного кода. Ограниченный дизайн
// Поскольку состояние является иммутабельным, редуктор обновляет его, каждый раз возвращая новое состояние, 
//что влечет дополнительные расходы памяти



// Назовите ключевые концепции Redux
// Redux Components
// 1. Операция (action)
// Операция - это статическая информация о событии, инициализирующем изменение состояния. 
//Обновление состояния в Redux всегда начинается с операции. Операции - это объекты, содержащие 
//обязательное свойство type и опциональное свойство payload. Операции вызываются с помощью метода 
//store.dispatch(). Операция создается с помощью "создателя операций" (action creator).

// Создатели операций - функции, помогающие создавать операции. Создатель операции возвращает объект 
//операции, который передается редуктору.

// Пример
// const setLoginStatus = (name, password) => {
//   return {
//     type: "LOGIN",
//     payload: {
//       username: "foo",
//       password: "bar"
//     }
//   }
// }
// 2. Редуктор (reducer)
// Редукторы - это "чистые" функции, принимающие текущее состояние приложения, 
//выполняющие над ним операцию и возвращающие новое состояние. Новое состояние - объект, 
//описывающий изменения состояния, произошедшие в ответ на вызванную операцию.

// Это похоже на функцию reduce() в JavaScript, когда значение вычисляется на основе нескольких 
//значений после выполнения коллбека.

// const LoginComponent = (state = initialState, action) => {
//     switch (action.type) {
//       // данный редуктор обрабатывает операции с типом "LOGIN"
//       case "LOGIN":
//           return state.map(user => {
//               if (user.username !== action.username) {
//                   return user
//               }
//               if (user.password == action.password) {
//                   return {
//                       ...user,
//                       login_status: "LOGGED IN"
//                   }
//               }
//           });
//       default:
//           return state;
//       }
// }
// Комбинация нескольких редукторов: вспомогательная функция combineReducers() преобразует объект с 
//несколькими редукторами в один редуктор для передачи в createStore().
// Синтаксис
// const rootReducert = combineReducer(reducer1, reducer2)
// 3. Состояние (state)
// Состояние - это объект, содержащий состояние приложения. При обновлении состояния, обновляются все 
//подписанные на него компоненты. Хранилище отвечает за запись, чтение и обновление состояния.
// Пример
// import React from 'react'
// import { render } from 'react-dom'
// import { Provider } from 'react-redux'
// import { createStore } from 'redux'
// import rootReducer from './reducers'
// import App from './components/App'
// const store = createStore(rootReducer)
//  render (
//    <provider store="{store}">
//      <app>
//    </app></provider>,
//    document.getElementById('root')
//  )
// При использовании Redux с React состояние не требует подъема. Это также облегчает идентификацию 
//операции, которая вызвала изменение состояния.
// 4. Отправка (dispatch)
// Отправка - это передача операции с типом и полезной нагрузкой редуктору.
// store.dispatch()
// 5. Подписка (subscribe)
// Подписка - это метод, испольуземый для подписки на данные/состояние хранилища.
// store.subscribe()
// 6. Провайдер (provider)
// Провайдер - это компонент, содержащий ссылку на хранилище и передающий данные из хранилища 
//дочерним компонентам.
// 7. Подключение (connect)
// Подключение - это функция, взаимодействующая с провайдером.
// 8. Промежуточное программное обеспечение, промежуточный слой, посредник (middleware)
// Посредник - это способ расширения Redux дополнительным функционалом. Посредники используются 
//для отправки асинхронных операций. Они настраиваются в момент создания хранилища.
// Синтаксис
// const store = createStore(reducers, initialState, middleware);




