export const typingStaticDynamic = 'https://ru.hexlet.io/courses/introduction_to_programming/lessons/types/theory_unit'


//статическая типизация означает проверку типов перед запуском программы, 
//динамическая — проверку типов, когда программа запущена.

//Что такое типизированный язык
// Языки могут быть статическими или динамическими.

// статический: переменная может содержать только один тип, как в Java - переменная, 
//объявленная как строка, может принимать только набор символов и ничего больше;

// динамический: переменная может содержать несколько типов - как в JS: 
//переменная может принимать число, символы и т. д.


// Чтобы понимать разницу между динамической и статической типизацией, нам сначала нужно посмотреть 
//как написанные программы становятся запущенными программами.
// Код, который вы пишете, обычно конвертируется в понятную для запуска компьютером форму. 
//Этот процесс называется компиляцией, а промежуток времени, за который это происходит — 
//"стадией компиляции" или compile time.
//После того, как компиляция закончена и программа запущена, начинается отсчёт времени, 
//который называется "стадией исполнения" или run time.

//Некоторые языки проверяют типы и ищут ошибки типизации на стадии компиляции. У них статическая типизация.

//Другие языки проверяют типы и ищут ошибки типизации на стадии исполнения. Такая типизация — динамическая.

// Иными словами: статическая типизация означает проверку типов перед запуском программы, 
//динамическая — проверку типов, когда программа запущена.

// C#, C++, Java, Go — статически типизированные языки. Если в одном из этих языков вы создадите число 
//и попытаетесь проводить с ним операции, как с функцией, вы получите ошибку во время компиляции, 
//а программа не станет запускаться — она даже не дойдёт до этой стадии, потому что ошибка типизации 
//будет обнаружена перед исполнением, в период компиляции.

// JavaScript, Ruby, PHP — динамически типизированные языки. Как вы видели раньше, если использовать 
//неверную типизацию, ваша программа запустится, а ошибка обнаружится только когда будет исполняться 
//конкретная строчка кода. Здесь типы проверяются в период исполнения.

// Вообще-то, в JavaScript обычно нет никакой компиляции, но это тема другого урока.

//Динамическая типизация не хуже и не лучше статической. Оба способа имеют свои преимущества и недостатки. 
//Динамически типизированные языки обычно проще изучать и писать на них программы, но, как вы можете 
//представить, это потенциально увеличивает ошибки.


//Сильная и слабая типизации 
//У этой концепции нет ничего общего с динамической и статической типизацией, смысл которых — 
//КОГДА проверять типы. Сильная против слабой — это НАСКОЛЬКО СЕРЬЁЗНО проверять типы.


