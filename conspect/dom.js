export const dom = ''

//https://learn.javascript.ru/dom-nodes
//https://learn.javascript.ru/dom-navigation
//https://learn.javascript.ru/searching-elements-dom


// В соответствии с объектной моделью документа («Document Object Model», коротко DOM),
//каждый HTML-тег является объектом. Вложенные теги являются «детьми» родительского элемента.
//Текст, который находится внутри тега, также является объектом.
// Все эти объекты доступны при помощи JavaScript, мы можем использовать их для изменения страницы.

// DOM – это представление HTML-документа в виде дерева тегов.

// HTML/XML документы представлены в браузере в виде DOM-дерева.

// Теги становятся узлами-элементами и формируют структуру документа.
// Текст становится текстовыми узлами.
// … и т.д. Всё, что записано в HTML, есть и в DOM-дереве, даже комментарии.
// Для изменения элементов или проверки DOM-дерева мы можем использовать инструменты разработчика в браузере.

// Здесь мы рассмотрели основы, наиболее часто используемые и важные действия для начала разработки.
//Подробную документацию по инструментам разработки Chrome Developer Tools можно найти на
//странице https://developers.google.com/web/tools/chrome-devtools. Лучший способ изучить инструменты –
//походить по разным вкладкам, почитать меню: большинство действий очевидны для пользователя.
//Позже, когда вы немного их изучите, прочитайте документацию и узнайте то, что осталось.

// У DOM-узлов есть свойства и методы, которые позволяют выбирать любой из элементов, изменять,
//перемещать их на странице и многое другое.

// Получив DOM-узел, мы можем перейти к его ближайшим соседям используя навигационные ссылки.

// Есть два основных набора ссылок:
// Для всех узлов (тэги, текстовые узлы, коментарии): parentNode, childNodes, firstChild, lastChild,
//previousSibling, nextSibling.

// Только для узлов-элементов (только тэги): parentElement, children, firstElementChild, lastElementChild,
//previousElementSibling, nextElementSibling.

// Некоторые виды DOM-элементов, например таблицы, предоставляют дополнительные ссылки и коллекции
//для доступа к своему содержимому.

// Есть 6 основных методов поиска элементов в DOM:

// Метод	Ищет по...	Ищет внутри элемента?	Возвращает живую коллекцию?
// querySelector	CSS-selector	✔	-
// querySelectorAll	CSS-selector	✔	-
// getElementById	id	-	-
// getElementsByName	name	-	✔
// getElementsByTagName	tag or '*'	✔	✔
// getElementsByClassName	class	✔	✔

// Безусловно, наиболее часто используемыми в настоящее время являются методы querySelector и querySelectorAll,
//но и методы getElement(s)By* могут быть полезны в отдельных случаях, а также встречаются в старом коде.

// Кроме того:
// Есть метод elem.matches(css), который проверяет, удовлетворяет ли элемент CSS-селектору.

// Метод elem.closest(css) ищет ближайшего по иерархии предка, соответствующему данному CSS-селектору.
//Сам элемент также включён в поиск.

// И, напоследок, давайте упомянем ещё один метод, который проверяет наличие отношений между предком и потомком:
// elemA.contains(elemB) вернёт true, если elemB находится внутри elemA (elemB потомок elemA) или
//когда elemA==elemB.



// Все методы "getElementsBy*" возвращают живую коллекцию. Такие коллекции всегда отражают текущее состояние 
// документа и автоматически обновляются при его изменении.




import { contents } from "./contents"

