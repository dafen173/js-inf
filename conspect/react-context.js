export const reactContext = ''



// Что такое контекст (Context)?
// Context предоставляет возможность передавать данные в дереве компонента без необходимости передачи пропов на каждом уровне вручную.
// Например, статус аутентификации пользователя, языковые предпочтения или цветовая схема могут использоваться многими компонентами приложения:
// const { Provider, Consumer } = React.createContext(defaultValue)




//https://ru.reactjs.org/docs/context.html#api
// Контекст
// Контекст позволяет передавать данные через дерево компонентов без необходимости передавать пропсы на промежуточных уровнях.

// В типичном React-приложении данные передаются сверху вниз (от родителя к дочернему компоненту) с помощью пропсов. Однако, подобный способ использования может быть чересчур громоздким для некоторых типов пропсов (например, выбранный язык, UI-тема), которые необходимо передавать во многие компоненты в приложении. Контекст предоставляет способ делиться такими данными между компонентами без необходимости явно передавать пропсы через каждый уровень дерева.

// Когда использовать контекст
// Контекст разработан для передачи данных, которые можно назвать «глобальными» для всего дерева React-компонентов 
//(например, текущий аутентифицированный пользователь, UI-тема или выбранный язык). В примере ниже мы вручную передаём проп theme, чтобы стилизовать компонент Button:

// class App extends React.Component {
//   render() {
//     return <Toolbar theme="dark" />;
//   }
// }

// function Toolbar(props) {
//   // Компонент Toolbar должен передать проп "theme" ниже,
//   // фактически не используя его. Учитывая, что у вас в приложении
//   // могут быть десятки компонентов, использующих UI-тему,
//   // вам придётся передавать проп "theme" через все компоненты.
//   // И в какой-то момент это станет большой проблемой.
//   return (
//     <div>
//       <ThemedButton theme={props.theme} />
//     </div>
//   );
// }

// class ThemedButton extends React.Component {
//   render() {
//     return <Button theme={this.props.theme} />;
//   }
// }



// Контекст позволяет избежать передачи пропсов в промежуточные компоненты:

// // Контекст позволяет передавать значение глубоко
// // в дерево компонентов без явной передачи пропсов
// // на каждом уровне. Создадим контекст для текущей
// // UI-темы (со значением "light" по умолчанию).
// const ThemeContext = React.createContext('light');

// class App extends React.Component {
//   render() {
//     // Компонент Provider используется для передачи текущей
//     // UI-темы вниз по дереву. Любой компонент может использовать
//     // этот контекст и не важно, как глубоко он находится.
//     // В этом примере мы передаём "dark" в качестве значения контекста.
//     return (
//       <ThemeContext.Provider value="dark">
//         <Toolbar />
//       </ThemeContext.Provider>
//     );
//   }
// }

// // Компонент, который находится в середине,
// // больше не должен явно передавать тему вниз.
// function Toolbar() {
//   return (
//     <div>
//       <ThemedButton />
//     </div>
//   );
// }

// class ThemedButton extends React.Component {
//   // Определяем contextType, чтобы получить значение контекста.
//   // React найдёт (выше по дереву) ближайший Provider-компонент,
//   // предоставляющий этот контекст, и использует его значение.
//   // В этом примере значение UI-темы будет "dark".
//   static contextType = ThemeContext;
//   render() {
//     return <Button theme={this.context} />;
//   }
// }



// Для чего используется "дефолтное" значение контекста?
// Аргумент defaultValue используется в случаях, когда в дереве компонента не найден подходящий провайдер (provider). Это может быть полезным для тестирования компонентов в изоляции без необходимости их оборачивания в Provider:
// const MyContext = React.createContext(defaultValue);



