export const deferAsync = ''


//https://learn.javascript.ru/script-async-defer


// defer
// Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт, когда DOM дерево будет полностью построено.
// Вот тот же пример, что и выше, но с defer:
// <p>...содержимое перед скриптом...</p>
// <script defer src="https://javascript.info/article/script-async-defer/long.js?speed=1"></script>
// <!-- отображается сразу же -->
// <p>...содержимое после скрипта...</p>

// Скрипты с defer никогда не блокируют страницу.
// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.

// Содержимое страницы отобразится мгновенно.
// Событие DOMContentLoaded подождёт отложенный скрипт. Оно будет сгенерировано, только когда скрипт (2) будет загружен и выполнен.
// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
// Поэтому, если сначала загружается большой скрипт, а затем меньшего размера, то последний будет ждать.




// async
// Атрибут async означает, что скрипт абсолютно независим:

// Страница не ждёт асинхронных скриптов, содержимое обрабатывается и отображается.
// Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
// DOMContentLoaded может произойти как до асинхронного скрипта (если асинхронный скрипт завершит загрузку после того, как страница будет готова),
// …так и после асинхронного скрипта (если он короткий или уже содержится в HTTP-кеше)
// Остальные скрипты не ждут async, и скрипты casync не ждут другие скрипты.
// Так что если у нас есть несколько скриптов с async, они могут выполняться в любом порядке. То, что первое загрузится – запустится в первую очередь:

// <p>...содержимое перед скриптами...</p>
// <script>
//   document.addEventListener('DOMContentLoaded', () => alert("DOM готов!"));
// </script>

// <script async src="https://javascript.info/article/script-async-defer/long.js"></script>
// <script async src="https://javascript.info/article/script-async-defer/small.js"></script>

// <p>...содержимое после скриптов...</p>

// Содержимое страницы отображается сразу же : async его не блокирует.
// DOMContentLoaded может произойти как до, так и после async, никаких гарантий нет.
// Асинхронные скрипты не ждут друг друга. Меньший скрипт small.js идёт вторым, но скорее всего загрузится раньше long.js, поэтому и запустится первым. То есть, скрипты выполняются в порядке загрузки.
// Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д. Они не зависят от наших скриптов, и мы тоже не должны ждать их:

// <!-- Типичное подключение скрипта Google Analytics -->
// <script async src="https://google-analytics.com/analytics.js"></script>



// Мы можем также добавить скрипт и динамически, с помощью JavaScript:
// let script = document.createElement('script');
// script.src = "/article/script-async-defer/long.js";
// document.body.append(script); // (*)
// Скрипт начнёт загружаться, как только он будет добавлен в документ (*).

// Динамически загружаемые скрипты по умолчанию ведут себя как «async».
// То есть:
// Они никого не ждут, и их никто не ждёт.
// Скрипт, который загружается первым – запускается первым (в порядке загрузки).

// Мы можем изменить относительный порядок скриптов с «первый загрузился – первый выполнился» на порядок, в котором они идут в документе (как в обычных скриптах) с помощью явной установки свойства async в false:
// let script = document.createElement('script');
// script.src = "/article/script-async-defer/long.js";
// script.async = false;
// document.body.append(script);

// У async и defer есть кое-что общее: они не блокируют отрисовку страницы. Так что пользователь может просмотреть содержимое страницы и ознакомиться с ней сразу же.
// Но есть и значимые различия:
// Порядок	DOMContentLoaded
// async	Порядок загрузки (кто загрузится первым, тот и сработает).	Не имеет значения. Может загрузиться и выполниться до того, как страница полностью загрузится. Такое случается, если скрипты маленькие или хранятся в кеше, а документ достаточно большой.
// defer	Порядок документа (как расположены в документе).	Выполняется после того, как документ загружен и обработан (ждёт), непосредственно перед DOMContentLoaded.
// Страница без скриптов должна быть рабочей
// Пожалуйста, помните, что когда вы используете defer, страница видна до того, как скрипт загрузится.
// Пользователь может знакомиться с содержимым страницы, читать её, но графические компоненты пока отключены.
// Поэтому обязательно должна быть индикация загрузки, нерабочие кнопки – отключены с помощью CSS или другим образом. Чтобы пользователь явно видел, что уже готово, а что пока нет.
// На практике defer используется для скриптов, которым требуется доступ ко всему DOM и/или важен их относительный порядок выполнения.
// А async хорош для независимых скриптов, например счётчиков и рекламы, относительный порядок выполнения которых не играет роли.


