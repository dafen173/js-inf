export const pureComponent = ''



// React.PureComponent - это тоже самое, что React.Component, за исключением автоматической обработки метода shouldComponentUpdate(). При измнении пропов или состояния PureComponent автоматически выполнит их поверхностное сравнение. С другой стороны, Component такого сравнения по умолчанию не проводит. Поэтому компонент будет повторно рендерится до тех пор, пока не будет вызван метод shouldComponentUpdate().

//https://github.com/harryheman/React-Total/blob/main/md/questions_react-v2.md#%D0%B211-%D1%87%D1%82%D0%BE-%D1%82%D0%B0%D0%BA%D0%BE%D0%B5-%D1%87%D0%B8%D1%81%D1%82%D1%8B%D0%B9-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82-pure-component
// Что такое "чистый" компонент (Pure Component)?
// Pure Components - это компоненты, которые не рендерятся повторно при обновлении их состояния и пропов одними и теми же значениями. Если значение предыдущего и нового состояния и пропов равны, компонент не отрисовывается повторно. "Чистые" компоненты ограничивают повторный рендеринг, обеспечивая повышение производительности приложения.

// Особенности "чистых" компонентов

// Предотвращают повторный рендеринг компонента, если его состояние и пропы остались прежними
// Неявно реализуют метод shouldComponentUpdate()
// state и props сравниваются поверхностно
// В ряде случаев, такие компоненты являются более производительными
// По аналогии с "чистыми" функциями в JavaScript, React-компонент считается "чистым", если он возвращает (рендерит) одинаковый результат для одних и тех же значений пропов и состояния. Для создания таких компонентов React предоставляет базовый класс PureComponent. Классовый компонент, расширяющий React.PureComponent, обрабатывается как "чистый" компонент.

// "Чистые" компоненты похожи на обычные, за исключением того, что они неявно реализуют метод shouldComponentUpdate(), проводя поверхностное сравнение состояния и пропов. Если текущие и следующие состояние и пропы являются одинаковыми, повторный рендеринг компонента не выполняется.

// React-компоненты перерисовываются в следующих случаях:

// В компоненте вызывается setState()
// Обновляются значения props
// Вызывается forceUpdate()
// "Чистые" компоненты не перерисовываются вслепую, без оценки значений state и props. Если обновленные значения аналогичны предыдущим, повторный рендеринг не запускается.




// Зачем использовать "чистые" компоненты? Когда следует использовать "чистые" компоненты вместо обычных?
// Компоненты имеют один недостаток: они всегда повторно рендерятся вслед за родительским компонентом, даже если их пропы остались прежними.

// Компоненты также всегда перерисовываются при обновлении их состояния, даже если новое значение состояние идентично предыдущему. При обновлении родительского компонента перерисовываются все его потомки, потомки потомков и т.д.

// Такое поведение может привести с большому количеству ненужного рендеринга. Действительно, если компонент зависит только от пропов и состояния, тогда он должен обновляться только при их изменении независимо от того, что происходит с его родительским компонентом.

// Это как раз то, для чего предназначены "чистые" компоненты - они останавливают "порочный круг" рендеринга. "Чистые" компоненты не перерисовываются до тех пор, пока не изменятся их пропы и состояние.

// Случаи использования "чистых" компонентов:

// В целях предотвращения повторного рендеринга компонента, чьи состояние и пропы остались прежними
// Состояние и пропы компонента являются иммутабельными
// Мы не планируем реализовывать собственный метод жизненного цикла shouldComponentUpdate()
// С другой стороны, мы не должны использовать PureComponent в случаях, когда:

// Состояние или пропы являются изменяемыми
// Мы планируем реализовать собственный метод shouldComponentUpdate()





