export const recursion = 'https://learn.javascript.ru/recursion'


// Рекурсия – это приём программирования, полезный в ситуациях, когда задача может быть естественно 
//разделена на несколько аналогичных, но более простых задач. Или когда задача может быть упрощена до 
//несложных действий плюс простой вариант той же задачи. Или, как мы скоро увидим, для работы с 
//определёнными структурами данных.

// В процессе выполнения задачи в теле функции могут быть вызваны другие функции для выполнения подзадач. 
//Частный случай подвызова – когда функция вызывает сама себя. Это как раз и называется рекурсией.

// Рекурсия – это термин в программировании, означающий вызов функцией самой себя. 
//Рекурсивные функции могут быть использованы для элегантного решения определённых задач.

// Когда функция вызывает саму себя, это называется шагом рекурсии. База рекурсии – это такие аргументы функции, 
//которые делают задачу настолько простой, что решение не требует дальнейших вложенных вызовов.

// Рекурсивно определяемая структура данных – это структура данных, которая может быть определена 
//с использованием самой себя.

// Например, связанный список может быть определён как структура данных, состоящая из объекта, 
//содержащего ссылку на список (или null).

// list = { value, next -> list }
// Деревья, такие как дерево HTML-элементов или дерево отделов из этой главы, также являются рекурсивными: 
//они разветвляются, и каждая ветвь может содержать другие ветви.

// Как мы видели в примере sumSalary, рекурсивные функции могут быть использованы для прохода по ним.

// Любая рекурсивная функция может быть переписана в итеративную. И это иногда требуется для оптимизации 
//работы. Но для многих задач рекурсивное решение достаточно быстрое и простое в написании и поддержке.



