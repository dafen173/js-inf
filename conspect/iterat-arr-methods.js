export const iteratArrMethods = 'https://maxello.gitbooks.io/js-note/content/06_functions_continuation/metodi_massivov.html'


//https://learn.javascript.ru/array-methods
//Массив: перебирающие методы
// forEach – для перебора массива.
// filter – для фильтрации массива.
// every/some – для проверки массива.
// map – для трансформации массива в массив.
// reduce/reduceRight – для прохода по массиву с вычислением значения.


// Метод filter( )
// Источник: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/filter

// Методfilter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.
// Синтаксис:
// arr.filter(callback[, thisArg])
// Параметры
// callback Функция проверки каждого элемента. Возвращает true для сохранения элемента и false для его пропуска.
// thisArg Необязательный параметр. Значение, используемое в качестве this при выполнении функции callback .
// Функция callback вызывается с тремя аргументами:

// Значение элемента;
// Индекс элемента;
// Массив, по которому осуществляется проход.
// Описание
// Метод filter вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве, и конструирует новый массив со всеми значениями, для которых функция callback вернула true. Функция callback вызывается только для индексов массива, имеющих присвоенные значения; она не вызывается для индексов, которые были удалены или которым значения никогда не присваивались. Элементы массива, не прошедшие проверку функцией callback, просто пропускаются и не включаются в новый массив.

// Если в метод filter был передан параметр thisArg, при вызове callback он будет использоваться в качестве значения this. В противном случае, в качестве значения this будет использоваться значение undefined. В конечном итоге, значение this, наблюдаемое из функции callback, определяется согласно обычным правилам определения this, видимого из функции.
// Метод filter не изменяет массив, для которого он был вызван.

// Пример: отфильтровывание всех маленьких значений
// Следующий пример использует filter для создания отфильтрованного массива, все элементы которого больше 10.

function isBigEnough(element) {
    return element >= 10;
  }
  var filtered = [12, 5, 8, 130, 44].filter(isBigEnough);
  // массив filtered равен [12, 130, 44]
  
  
  
  
  
  // Метод map( )
  // Источник: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/map
  
  // Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
  // Синтаксис
  // arr.map(callback[, thisArg])
  // Параметры
  // callback Функция, создающая элемент в новом массиве, принимает три аргумента:
  
  // currentValue Текущий элемент, создаваемый в массиве.
  // index Индекс текущего обрабатываемого элемента в массиве.
  // array Массив, по которому осуществляется проход.
  // thisArg Необязательный параметр. Значение, используемое в качестве this при вызове функции callback.
  
  // Описание
  // Метод map вызывает переданную функцию callback один раз для каждого элемента, в порядке их появления и конструирует новый массив из результатов её вызова. Функция callback вызывается только для индексов массива, имеющих присвоенные значения; она не вызывается для индексов, значения по которым равны undefined, то есть, которые были удалены или которым значения никогда не присваивались.
  
  // Функция callback вызывается с тремя аргументами: значением элемента, индексом элемента и массивом, по которому осуществляется проход.
  
  // Метод map не изменяет массив, для которого он был вызван (хотя функция callback может это делать).
  
  // Примеры
  // Пример: отображение массива чисел на массив квадратных корней
  // Следующий код берёт массив чисел и создаёт новый массив, содержащий квадратные корни чисел из первого массива.
  
  var numbers = [1, 4, 9];
  var roots = numbers.map(Math.sqrt);
  // теперь roots равен [1, 2, 3], а numbers всё ещё равен [1, 4, 9]
  
  // Пример: отображение массива чисел с использованием функции, содержащей аргумент
  // Следующий код показывает, как работает отображение, когда функция требует один аргумент. Аргумент будет автоматически присваиваться каждому элементу массива, когда map проходит по оригинальному массиву.
  
  var numbers = [1, 4, 9];
  var doubles = numbers.map(function(num) {
    return num * 2;
  });
  // теперь doubles равен [2, 8, 18], а numbers всё ещё равен [1, 4, 9]
  
  
  
  
  
  // Метод forEach( )
  // Источник: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
  
  // Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.
  // Синтаксис
  // arr.forEach(callback[, thisArg])
  // Параметры
  // callback Функция, выполняемая для каждого элемента, принимает три аргумента:

  // currentValue Текущий обрабатываемый элемент в массиве.
  // index Индекс текущего обрабатываемого элемента в массиве.
  // array Массив, по которому осуществляется проход.
  // thisArg Значение, используемое в качестве this при вызове функции callback. Описание

  // Метод forEach выполняет функцию callback один раз для каждого элемента, находящегося в массиве в порядке возрастания.
  // Она не будет вызвана для удалённых или пропущенных элементов массива. Однако, она будет вызвана для элементов,
  // которые присутствуют в массиве и имеют значение undefined.

  // Метод forEach выполняет функцию callback один раз для каждого элемента массива; в отличие от методов every и some,
  // он всегда возвращает значение undefined.

  // Пример: Печать содержимого массива
  // Следующий код выводит каждый элемент массива в новой строке лога:

  function logArrayElements(element, index, array) {
    console.log('a[' + index + '] = ' + element);
  }

  // Обратите внимание на пропуск по индексу 2, там нет элемента, поэтому он не посещается
  [2, 5, , 9].forEach(logArrayElements);
  // логи:
  // a[0] = 2
  // a[1] = 5
  // a[3] = 9






  // Метод reduce( )
  // Источники: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce

  // http://msdn.microsoft.com/ru-ru/library/ie/ff679975(v=vs.94).aspx
  
  // Метод reduce() вызывает заданную функцию обратного вызова для всех элементов в массиве. Возвращаемое значение функции обратного вызова представляет собой накопленный результат и предоставляется как аргумент в следующем вызове функции обратного вызова.
  
  // Синтаксис
  // arr.reduce(callback[, initialValue])
  // Параметры
  // callback Функция, выполняющаяся для каждого элемента массива, принимает четыре аргумента:
  
  // previousValue Значение, возвращённое предыдущим выполнением функции callback , либо значение initialValue, если оно предоставлено (смотрите пояснения ниже).
  // currentValue Текущий обрабатываемый элемент массива.
  // index Индекс текущего обрабатываемого элемента массива.
  // array Массив, для которого была вызвана функция reduce.
  // initialValue Необязательный параметр. Объект, используемый в качестве первого аргумента при первом вызове функции callback.
  
  // Описание
  // Метод reduce выполняет функцию callback один раз для каждого элемента, присутствующего в массиве, за исключением пустот, принимая четыре аргумента: начальное значение (или значение от предыдущего вызова callback), значение текущего элемента, текущий индекс и массив, по которому происходит итерация.
  
  // При первом вызове функции, параметры previousValue и currentValue могут принимать одно из двух значений. Если при вызове reduce передан аргумент initialValue, то значение previousValue будет равным значению initialValue, а значение currentValue будет равным первому значению в массиве. Если аргумент initialValue не задан, то значение previousValue будет равным первому значению в массиве, а значение currentValue будет равным второму значению в массиве.
  
  // Если массив пустой и аргумент initialValue не указан, будет брошено исключение TypeError. Если массив состоит только из одного элемента (независимо от его положения в массиве) и аргумент initialValue не указан, или если аргумент initialValue указан, но массив пустой, то будет возвращено одно это значение, без вызова функции callback.
  
  // Предположим, что reduce используется следующим образом:
  
  // [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
  //   return previousValue + currentValue;
  // });
  // Функция обратного вызова будет вызвана четыре раза, аргументы и возвращаемое значение при каждом вызове будут следующими:
  
  // 0:0	previousValue	currentValue	index	array	возвращаемое значение
  // 1-й вызов	0	1	1	[0, 1, 2, 3, 4]	1
  // 2-й вызов	1	2	2	[0, 1, 2, 3, 4]	3
  // 3-й вызов	3	3	3	[0, 1, 2, 3, 4]	6
  // 4-й вызов	6	4	4	[0, 1, 2, 3, 4]	10
  // Значение, возвращённое reduce будет равным последнему результату выполнения функции обратного вызова (10). Если же вы зададите начальное значение initialValue, результат будет выглядеть так:
  
  // [0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
  //   return previousValue + currentValue;
  // }, 10);
  // 0:0	previousValue	currentValue	index	array	возвращаемое значение
  // 1-й вызов	10	0	0	[0, 1, 2, 3, 4]	10
  // 2-й вызов	10	1	1	[0, 1, 2, 3, 4]	11
  // 3-й вызов	11	2	2	[0, 1, 2, 3, 4]	13
  // 4-й вызов	13	3	3	[0, 1, 2, 3, 4]	16
  // 5-й вызов	16	4	4	[0, 1, 2, 3, 4]	20
  // Значение, возвращённое reduce в этот раз, конечно же, будет равным 20.
  
  // Примеры
  // Пример: суммирование всех значений в массиве
  var total = [0, 1, 2, 3].reduce(function(a, b) {
    return a + b;
  });
  // total == 6
  // Пример: разворачивание массива массивов
  var flattened = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) {
    return a.concat(b);
  });
  // flattened равен [0, 1, 2, 3, 4, 5]
  
  
  
  
  
  
  // Метод every( )
  // Источник: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/every
  
  // Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
  // Синтаксис
  // arr.every(callback[, thisArg])
  // Параметры
  // callback Функция проверки каждого элемента, принимает три аргумента:
  
  // currentValue Текущий обрабатываемый элемент в массиве.
  // index Индекс текущего обрабатываемого элемента в массиве.
  // array Массив, по которому осуществляется проход.
  // thisArg Необязательный параметр. Значение, используемое в качестве this при выполнении функции callback.
  
  // Описание
  // Метод every вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве до тех пор, пока не найдет такой, для которого callback вернет ложное значение (значение, становящееся равным false при приведении его к типу Boolean). Если такой элемент найден, метод every немедленно вернёт false. В противном случае, если callback вернёт true для всех элементов массива, метод every вернёт true.
  
  // Функция callback вызывается только для индексов массива, имеющих присвоенные значения; она не вызывается для индексов, которые были удалены или которым значения никогда не присваивались.
  
  // Метод every не изменяет массив, для которого он был вызван.
  
  // Примеры
  // Пример: проверка размера всех элементов массива
  // Следующий пример проверяет, являются ли все элементы массива числами, большими 10.
  
  function isBigEnough(element, index, array) {
    return element >= 10;
  }
  var passed = [12, 5, 8, 130, 44].every(isBigEnough);
  // passed равен false
  passed = [12, 54, 18, 130, 44].every(isBigEnough);
  // passed равен true
  
  // Пример: Прерывание цикла
  // Следующий код использует Array.prototype.every для логирования содержимого массива и останавливается при превышении значением заданного порогового значения THRESHOLD.
  
  var THRESHOLD = 12;
  var v = [5, 2, 16, 4, 3, 18, 20];
  var res;
  
  res = v.every(function(element, index, array) {
    console.log('element:', element);
    if (element >= THRESHOLD) {
      return false;
    }
  
    return true;
  });
  console.log('res:', res);
  // логи:
  // element: 5
  // element: 2
  // element: 16
  // res: false
  
  res = v.some(function(element, index, array) {
    console.log('element:', element);
    if (element >= THRESHOLD) {
      return true;
    }
  
    return false;
  });
  console.log('res:', res);
  // логи:
  // element: 5
  // element: 2
  // element: 16
  // res: true
  
  
  
  
  
  
  // Метод some( )
  // Источник: https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/Array/some
  
  // Метод some() проверяет, удовлетворяет ли хоть какой-нибудь элемент массива условию, заданному в передаваемой функции.
  // Синтаксис
  // arr.some(callback[, thisArg])
  // Параметры
  // callback Функция проверки каждого элемента.
  // thisArg Необязательный параметр. Значение, используемое в качестве this при выполнении функции callback.
  // Метод some вызывает переданную функцию callback один раз для каждого элемента, присутствующего в массиве до тех пор, пока не найдет такой, для которого callback вернет истинное значение (значение, становящееся равным true при приведении его к типу Boolean). Если такой элемент найден, метод some немедленно вернёт true. В противном случае, если callback вернёт false для всех элементов массива, метод some вернёт false. Функция callback вызывается только для индексов массива, имеющих присвоенные значения; она не вызывается для индексов, которые были удалены или которым значения никогда не присваивались.
  
  // Функция callback вызывается с тремя аргументами: значением элемента, индексом элемента и массивом, по которому осуществляется проход.
  
  // Метод some не изменяет массив, для которого он был вызван.
  
  // Пример: проверка значений элементов массива
  // Следующий пример проверяет, есть ли в массиве какой-нибудь элемент, больший 10.
  
  function isBigEnough(element, index, array) {
    return element >= 10;
  }
  var passed = [2, 5, 8, 1, 4].some(isBigEnough);
  // passed равен false
  passed = [12, 5, 8, 1, 4].some(isBigEnough);
  // passed равен true





import { contents } from "./contents";

