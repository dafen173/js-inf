export const virtualShadowDom = ''


//https://github.com/harryheman/React-Total/blob/main/md/questions_react.md#25
// Что такое виртуальный DOM?
// Virtual DOM (VDOM) - это представление Real DOM, хранимое в оперативной памяти. Это представление синхронизируется с "настоящим" DOM. Сравнение происходит между вызовом функции рендеринга и отображением элемента на экране. Данный внутренний процесс называется reconciliation (согласованием).
// Как работает виртуальный DOM?
// Virtual DOM работает следующим образом:
// При любом изменении внутренних данных пользовательский интерфейс меняется в представлении виртуального DOM.
// Затем вычисляется разница между предыдущим и новым представлениями.
// После этого обновляются только те части реального DOM, которые подверглись изменениям.

//https://github.com/harryheman/React-Total/blob/main/md/questions_react-v2.md#%D0%B2122-%D0%B2-%D1%87%D0%B5%D0%BC-%D1%80%D0%B0%D0%B7%D0%BD%D0%B8%D1%86%D0%B0-%D0%BC%D0%B5%D0%B6%D0%B4%D1%83-shadowdom-%D0%B8-virtualdom
// Virtual DOM (виртуальный DOM)
// Виртуальный DOM - это асбтракция над браузерным DOM. Виртуальный DOM позволяет избежать внесения ненужных изменений в DOM, которые являются "дорогими", поскольку изменения DOM, обычно, приводят к повторному рендерингу страницы. Он позволяет объединять несколько обновлений в одно, поэтому не каждое изменение приводит к повторному рендерингу, вместо этого, перерисовка браузерного DOM осуществляется только после применения всех изменений к виртуальному DOM и определения различий между ними. Изменения к браузерному DOM применяются частично.
// Shadow DOM (теневой DOM)
// Теневой DOM, в первую очередь, связан с инкапсуляцией реализации. 
//Пользовательские элементы (custom elements) могут реализовывать более или менее 
//сложную логику с более или менее сложным DOM. Теневой DOM предоставляет браузеру 
//возможность построения поддеревьев DOM-элементов в процессе рендеринга документа.
// Разница
// Виртуальный DOM создает дополнительный DOM, а теневой скрывает детали 
//реализации и предоставляет изолированную область видимости для веб-компонентов.



//https://learn.javascript.ru/shadow-dom#itogo
// Теневой DOM – это способ создать свой, изолированный, DOM для компонента.
// shadowRoot = elem.attachShadow({mode: open|closed}) – создаёт теневой DOM для elem. Если mode="open", он доступен через свойство elem.shadowRoot.
// Мы можем создать подэлементы внутри shadowRoot с помощью innerHTML или других методов DOM.
// Элементы теневого DOM:
// Обладают собственной областью видимости идентификаторов
// Невидимы JavaScript селекторам из главного документа, таким как querySelector,
// Стилизуются своими стилями из теневого дерева, не из главного документа.





