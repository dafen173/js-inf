export const cachingPost = ''


// В основном POST не является идемпотентной операцией. Таким образом, вы не можете использовать 
//его для кэширования. GET должна быть идемпотентной операцией, поэтому она обычно используется для кэширования.

// Кроме семантики метода GET:
// Сам метод POST семантически предназначен для публикации чего-либо в ресурсе. 
//POST нельзя кэшировать, потому что если вы делаете что-то один раз, два раза или три раза, 
//то вы каждый раз изменяете ресурс сервера. Каждый запрос имеет значение и должен быть доставлен на сервер.

// Сам метод PUT семантически предназначен для размещения или создания ресурса. 
//Это идемпотентная операция, но она не будет использоваться для кэширования, 
//поскольку за это время могло произойти DELETE.

// Сам метод DELETE семантически предназначен для удаления ресурса. Это идемпотентная операция, 
//но она не будет использоваться для кэширования, поскольку за это время могла произойти PUT.

// Что касается кэширования на стороне клиента:
// Веб-браузер всегда будет пересылать ваш запрос, даже если у него есть ответ от предыдущей операции POST. 
//Например, вы можете отправлять электронные письма с помощью Gmail с разницей в пару дней. 
//У них может быть одна и та же тема и тело, но оба письма должны быть отправлены.

// По поводу кеширования прокси:
// Прокси-сервер HTTP, который пересылает ваше сообщение на сервер, никогда не будет кэшировать ничего, 
//кроме запроса GET или HEAD.

// Что касается кэширования сервера:
// Сервер по умолчанию не будет автоматически обрабатывать запрос POST, проверяя свой кеш. 
//Но, конечно, запрос POST может быть отправлен вашему приложению или надстройке, 
//и вы можете иметь свой собственный кеш, который вы читаете, когда параметры совпадают.




