export const frontVcBack = 'https://developer.mozilla.org/ru/docs/Learn/Server-side/First_steps/Introduction'


//======================
// Код, который выполняется в браузере, известный как код клиентской части, прежде всего связан 
//с улучшением внешнего вида и поведения отображаемой веб-страницы. Это включает в себя выбор и 
//стилизацию компонентов пользовательского интерфейса, создание макетов, навигацию, проверку форм и т. д. 

//Напротив, программирование веб-сайта на стороне сервера в основном включает выбор содержимого, 
//которое возвращается браузеру в ответ на запросы. 
//Код на стороне сервера обрабатывает такие задачи, как проверка отправленных данных и запросов, 
//использование баз данных для хранения и извлечения данных и отправка правильных данных клиенту 
//по мере необходимости.
//==========================


// код серверной части выполняется на веб-сервере и его основная роль состоит 
//в контролировании отправляемой пользователю информации 
//(тогда как код клиентской части в основном определяет структуру и способ преподнесения информации пользователю). 

// Теперь обратим внимание на код, задействованный в серверной части и клиентской части. 
//В каждом случае код существенно различается:
// Они имеют различные цели и назначение.
// Как правило, они не используют одни и те же языки программирования 
//(исключение составляет JavaScript, который можно использовать на стороне сервера и клиента).
// Они выполняются в разных средах операционной системы.

// Код клиентской части написан с использованием HTML, CSS и JavaScript — он запускается в веб-браузере 
//и практически не имеет доступа к базовой операционной системе (включая ограниченный доступ к файловой системе).
// Веб-разработчики не могут контролировать, какой браузер может использовать каждый пользователь 
//для просмотра веб-сайта — браузеры обеспечивают противоречивые уровни совместимости с функциями кода 
//на стороне клиента, и одной из задач программирования на стороне клиента является изящная обработка 
//различий в поддержке браузера.

// Код серверной части может быть написан на любом количестве языков программирования — 
//примеры популярных языков серверной части включают в себя 
//PHP, Python, Ruby, C# и NodeJS (JavaScript). Код серверной части имеет полный доступ к 
//операционной системе сервера, и разработчик может выбрать какой язык программирования (и какую версию) 
//он хотел бы использовать.

// Разработчики обычно пишут свой код, используя веб-фреймворки. 
//Веб-фреймворки — это наборы функций, объектов, правил и других конструкций кода, предназначенных 
//для решения общих проблем, ускорения разработки и упрощения различных типов задач, стоящих в конкретной области.

// И снова, поскольку и клиентская и серверная части используют фреймворки, области очень разные и, 
//следовательно, фреймворки тоже разные. 

//Фреймворки клиентской части упрощают вёрстку и представление данных, 
//тогда как фреймворки серверной части обеспечивают много «обычной» функциональности веб-сервера, 
//которую вы, возможно, в противном случае, должны были осуществлять самостоятельно 
//(например, поддержка сессий, поддержка пользователей и аутентификация, простой доступ к базе данных, 
//шаблонам библиотек и т. д.).

// На заметку: Фреймворки клиентской части часто используются для ускорения написания кода клиентской части, 
//но вы также можете решить писать весь код руками; на самом деле, написание кода руками может быть 
//более быстрым и эффективным, если вам нужен небольшой простой веб-сайт UI.

// И, наоборот, вы практически никогда не посмотрите в сторону написания кода 
//серверной части веб-приложения без фреймворка: осуществление жизненно важной функции, 
//такой как HTTP сервер действительно сложно сделать с нуля, скажем, на Python, но веб-фреймворки для Python, 
//такие как Django, обеспечивают это из коробки наряду с другими полезными инструментами.


// Frontend і Backend розробка –   відмінності і взаємодія між собою 

//Backend – це програмно-апаратна частина проекту,  
//Frontend ж є клієнтською стороною призначеного для користувача інтерфейсу до програмно-апаратної 
//частини проекту, тобто до бекенду. 

//Іншими словами бекенд – це все те, що відбувається на стороні сервера і що залишається 
//невидимим користувачеві (сам сервер теж є частиною бекенду, тільки апаратного). 
//Звідси і назва front – це видиме спереду, back – це те, що приховано позаду, невидиме. 

//Наприклад, ви оплачуєте покупку в інтернеті: вводите дані карти, клікаєте “сплатити” і бачите напис 
//“ваш платіж прийнятий в обробку” – це був фронтенд. 

//Те, як рухаються ваші гроші всередині мережі і те, як ваше замовлення надходить в магазин – це бекенд. 

//Відповідно, коли магазин бачить повідомлення про те, що надійшло замовлення, а гроші зараховані на рахунок
// – це знову робота фронтенда. 

//Бекенд-розробники мають справу з серверними мовами програмування, такими як Java, Python, PHP, Ruby та інші. 
//Також бекендери повинні знати бази даних, архітектуру, до всього іншого їм знадобляться знання 
//апаратної частини бекенд, тобто сервера, його можливості і характеристики. Бекенд-розробники, як правило, 
//не мають відношення ні з чим, що безпосередньо взаємодіє з користувачем, вони не розбираються в 
//призначених для користувача інтерфейсах UI і не заглиблюються в призначений для 
//користувача досвід взаємодії UX, або в верстку сторінки, хоча загальне розуміння всього цього мають. 
//Вони працюють, в основному, з точним аналізом і обчисленнями, де майже немає творчої, гуманітарної складової. 
//При цьому, їм потрібно вміти обчислювати всі можливі наслідки операцій та розуміти причини помилок,
//що з’явилися на шляху клієнт-сервер-клієнт.
// Источник: https://dan-it.com.ua/uk/blog/rozrobka-z-boku-front-end-shho-ce-take-i-chim-vidriznjaietsja-vid-back-end/






