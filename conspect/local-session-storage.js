export const localSessionStorage = 'https://learn.javascript.ru/localstorage'



// LocalStorage, sessionStorage
// Объекты веб-хранилища localStorage и sessionStorage позволяют хранить пары ключ/значение в браузере.
// Что в них важно – данные, которые в них записаны, сохраняются после обновления страницы (в случае sessionStorage) и даже после перезапуска браузера (при использовании localStorage). Скоро мы это увидим.
// Но ведь у нас уже есть куки. Зачем тогда эти объекты?

// В отличие от куки, объекты веб-хранилища не отправляются на сервер при каждом запросе. Поэтому мы можем хранить гораздо больше данных. Большинство браузеров могут сохранить как минимум 2 мегабайта данных (или больше), и этот размер можно поменять в настройках.
// Ещё одно отличие от куки – сервер не может манипулировать объектами хранилища через HTTP-заголовки. Всё делается при помощи JavaScript.
// Хранилище привязано к источнику (домен/протокол/порт). Это значит, что разные протоколы или поддомены определяют разные объекты хранилища, и они не могут получить доступ к данным друг друга.
// Объекты хранилища localStorage и sessionStorage предоставляют одинаковые методы и свойства:

// setItem(key, value) – сохранить пару ключ/значение.
// getItem(key) – получить данные по ключу key.
// removeItem(key) – удалить данные с ключом key.
// clear() – удалить всё.
// key(index) – получить ключ на заданной позиции.
// length – количество элементов в хранилище.
// Как видим, интерфейс похож на Map (setItem/getItem/removeItem), но также запоминается порядок элементов, и можно получить доступ к элементу по индексу – key(index).



// sessionStorage
// Объект sessionStorage используется гораздо реже, чем localStorage.

// Свойства и методы такие же, но есть существенные ограничения:

// sessionStorage существует только в рамках текущей вкладки браузера.
// Другая вкладка с той же страницей будет иметь другое хранилище.
// Но оно разделяется между ифреймами на той же вкладке (при условии, что они из одного и того же источника).
// Данные продолжают существовать после перезагрузки страницы, но не после закрытия/открытия вкладки.



// Объекты веб-хранилища localStorage и sessionStorage позволяют хранить пары ключ/значение в браузере.

// key и value должны быть строками.
// Лимит 2 Мб+, зависит от браузера.
// Данные не имеют «времени истечения».
// Данные привязаны к источнику (домен/протокол/порт).
// localStorage	sessionStorage
// Совместно используется между всеми вкладками и окнами с одинаковым источником	Разделяется в рамках вкладки браузера, среди ифреймов из того же источника
// «Переживает» перезапуск браузера	«Переживает» перезагрузку страницы (но не закрытие вкладки)
// API:

// setItem(key, value) – сохранить пару ключ/значение.
// getItem(key) – получить данные по ключу key.
// removeItem(key) – удалить значение по ключу key.
// clear() – удалить всё.
// key(index) – получить ключ на заданной позиции.
// length – количество элементов в хранилище.
// Используйте Object.keys для получения всех ключей.
// Можно обращаться к ключам как к обычным свойствам объекта, в этом случае событиеstorage не срабатывает.
// Событие storage:

// Срабатывает при вызове setItem, removeItem, clear.
// Содержит все данные об произошедшем обновлении (key/oldValue/newValue), url документа и объект хранилища storageArea.
// Срабатывает на всех объектах window, которые имеют доступ к хранилищу, кроме того, где оно было сгенерировано (внутри вкладки для sessionStorage, глобально для localStorage).



